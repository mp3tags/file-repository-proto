// Code generated by protoc-gen-go. DO NOT EDIT.
// source: main.proto

package file_repository

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("main.proto", fileDescriptor_7ed94b0a22d11796) }

var fileDescriptor_7ed94b0a22d11796 = []byte{
	// 132 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0x4d, 0xcc, 0xcc,
	0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4f, 0xcb, 0xcc, 0x49, 0xd5, 0x2b, 0x4a, 0x2d,
	0xc8, 0x2f, 0xce, 0x2c, 0xc9, 0x2f, 0xaa, 0x94, 0xe2, 0x02, 0x0b, 0x80, 0x25, 0x8d, 0x96, 0x31,
	0x72, 0x49, 0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x04, 0xc1, 0x55, 0x04, 0xa7, 0x16, 0x95,
	0x65, 0x26, 0xa7, 0x0a, 0xb9, 0x72, 0x71, 0x04, 0x27, 0x96, 0xa5, 0xba, 0x01, 0x95, 0x0b, 0x29,
	0xe8, 0xa1, 0x19, 0xa3, 0x07, 0x93, 0x82, 0x6a, 0x97, 0x12, 0xc5, 0x50, 0x01, 0x92, 0x55, 0x62,
	0x10, 0x72, 0xe6, 0x62, 0x77, 0x4f, 0x2d, 0x01, 0x9b, 0x22, 0x8f, 0xa1, 0x06, 0x2a, 0x43, 0xc8,
	0x90, 0x24, 0x36, 0xb0, 0x7b, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb6, 0xb3, 0xb3, 0x4f,
	0xda, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RequestRepositoryServiceClient is the client API for RequestRepositoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RequestRepositoryServiceClient interface {
	SaveFile(ctx context.Context, in *SaveFileRequest, opts ...grpc.CallOption) (*File, error)
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*File, error)
}

type requestRepositoryServiceClient struct {
	cc *grpc.ClientConn
}

func NewRequestRepositoryServiceClient(cc *grpc.ClientConn) RequestRepositoryServiceClient {
	return &requestRepositoryServiceClient{cc}
}

func (c *requestRepositoryServiceClient) SaveFile(ctx context.Context, in *SaveFileRequest, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/file.repository.RequestRepositoryService/SaveFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestRepositoryServiceClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/file.repository.RequestRepositoryService/GetFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RequestRepositoryServiceServer is the server API for RequestRepositoryService service.
type RequestRepositoryServiceServer interface {
	SaveFile(context.Context, *SaveFileRequest) (*File, error)
	GetFile(context.Context, *GetFileRequest) (*File, error)
}

// UnimplementedRequestRepositoryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRequestRepositoryServiceServer struct {
}

func (*UnimplementedRequestRepositoryServiceServer) SaveFile(ctx context.Context, req *SaveFileRequest) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveFile not implemented")
}
func (*UnimplementedRequestRepositoryServiceServer) GetFile(ctx context.Context, req *GetFileRequest) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}

func RegisterRequestRepositoryServiceServer(s *grpc.Server, srv RequestRepositoryServiceServer) {
	s.RegisterService(&_RequestRepositoryService_serviceDesc, srv)
}

func _RequestRepositoryService_SaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestRepositoryServiceServer).SaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.repository.RequestRepositoryService/SaveFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestRepositoryServiceServer).SaveFile(ctx, req.(*SaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestRepositoryService_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestRepositoryServiceServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.repository.RequestRepositoryService/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestRepositoryServiceServer).GetFile(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RequestRepositoryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "file.repository.RequestRepositoryService",
	HandlerType: (*RequestRepositoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveFile",
			Handler:    _RequestRepositoryService_SaveFile_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _RequestRepositoryService_GetFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}
